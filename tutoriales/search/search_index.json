{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"categories/","title":"Categor\u00edas","text":""},{"location":"blog/","title":"Blog","text":"<p>Posts y tutoriales para aprender temas de full-stack: </p> Ver lista de contenidos del blog (WIP) <ul> <li>Front-end: HTML, CSS, JS <li>Back-end: Python, Django</li> <li>Bases de datos: SQL con providers:</li> <ul> <li>SQLite3</li> <li>MySQL</li> <li>PostgreSQL</li> </ul> <li>Deployment:</li> <ul> <li>PythonAnywhere</li> <li>Clouding</li> <li>PM2</li> <li>Otros</li> </ul> <li>Machine Learning + IA:</li> <ul> <li>Redes Neuronales</li> <li>Pytorch</li> <li>TensorFlow</li> </ul>"},{"location":"blog/category/","title":"Categor\u00edas","text":"<p>Las principales categor\u00edas actuales:</p> <ul> <li>Django</li> </ul>"},{"location":"blog/2024/06/13/intro-a-django/","title":"Introducci\u00f3n a Django","text":"<p>Django es un framework web de alto nivel escrito en Python que permite un desarrollo r\u00e1pido y un dise\u00f1o limpio y pragm\u00e1tico. Fue dise\u00f1ado para ayudarte a construir aplicaciones web de una manera m\u00e1s f\u00e1cil y r\u00e1pida.</p>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#por-que-usar-django","title":"\u00bfPor qu\u00e9 usar Django?","text":"Estructura de archivos de Django <p>Django proporciona una serie de caracter\u00edsticas que lo hacen destacar entre otros frameworks web:</p> <ol> <li>Desarrollo R\u00e1pido: Django te permite desarrollar aplicaciones web de manera r\u00e1pida y eficiente. Con su arquitectura basada en el patr\u00f3n Modelo-Vista-Plantilla (MVT), puedes construir y escalar proyectos web de manera organizada.</li> <li>Seguro por Defecto: Django toma la seguridad en serio y ayuda a los desarrolladores a evitar errores comunes de seguridad, como la inyecci\u00f3n SQL, los ataques de scripts entre sitios y la falsificaci\u00f3n de solicitudes entre sitios.</li> <li>Escalable y Vers\u00e1til: Desde sitios personales hasta proyectos empresariales, Django puede manejar diferentes niveles de complejidad y tr\u00e1fico.</li> <li>Comunidad Activa: Con una comunidad grande y activa, siempre hay recursos disponibles, desde documentaci\u00f3n hasta foros y grupos de usuarios.</li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#componentes-principales-de-django","title":"Componentes Principales de Django","text":"Diagrama de Django <ol> <li>Modelos: Representan la estructura de los datos y permiten interactuar con la base de datos.</li> <li>Vistas: Contienen la l\u00f3gica de negocio y procesan las solicitudes del usuario.</li> <li>Plantillas: Definen c\u00f3mo se presentan los datos en el navegador.</li> <li>URLs: Mapean las solicitudes a las vistas correspondientes.</li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#primeros-pasos-con-django","title":"Primeros Pasos con Django","text":"<p>Para comenzar a trabajar con Django, sigue estos pasos b\u00e1sicos:</p> <ol> <li> <p>Instalaci\u00f3n: Aseg\u00farate de tener Python instalado. Luego, instala Django usando pip:    <code>bash    pip install django</code></p> </li> <li> <p>Crear un Proyecto: Crea un nuevo proyecto Django utilizando el comando:    <code>bash    django-admin startproject mi_proyecto    cd mi_proyecto</code></p> </li> <li> <p>Ejecutar el Servidor de Desarrollo: Inicia el servidor de desarrollo para ver tu proyecto en acci\u00f3n:    <code>bash    python manage.py runserver</code></p> </li> <li> <p>Crear una Aplicaci\u00f3n: Dentro de tu proyecto, crea una nueva aplicaci\u00f3n:    <code>bash    python manage.py startapp mi_aplicacion</code></p> </li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#conclusion","title":"Conclusi\u00f3n","text":"<p>Django es una herramienta poderosa para desarrollar aplicaciones web con Python. Con su enfoque en la simplicidad y la reutilizaci\u00f3n de componentes, puedes construir y escalar tus proyectos web de manera eficiente. En pr\u00f3ximos art\u00edculos, exploraremos m\u00e1s en detalle cada componente y funcionalidad de Django.</p>","tags":["full-stack","intro"]},{"location":"django/","title":"Django","text":"<p>Tutoriales de Django.</p>"},{"location":"django/como-servir-html/01.index/","title":"C\u00f3mo Servir HTML con Django","text":"<p>Para completar este tutorial se debe tener un proyecto de Django creado, si a\u00fan no  has creado un proyecto, puedes seguir este tutorial para crear un proyecto. </p> <p>Puedes incluir el template en el proyecto o en una app. Si necesitas crear una app puedes seguir este tutorial sobre c\u00f3mo crear una app en Django</p> <ul> <li>Post sobre las diferencias entre app y proyectos en Django. \u00bfQu\u00e9 son y cu\u00e1ndo necesitas cada uno?</li> </ul> <p>Django se basa en el patr\u00f3n Model-View-Template (MVT). En este tutorial no incluiremos la parte del modelo pero puedes ver c\u00f3mo funcionan estos componentes en el diagrama siguiente:</p> <p></p> <ul> <li>Model: Representa la estructura de los datos y maneja la l\u00f3gica de la base de datos. Los modelos se definen en el archivo models.py de una aplicaci\u00f3n Django y suelen utilizarse para definir las tablas y campos de la base de datos.</li> </ul> <p>Si ya tienes claro d\u00f3nde colocar este HTML (template) que quieres servir con Django vamos a empezar con el tutorial.</p> computer, science, ofc."},{"location":"django/como-servir-html/02.crear_template/","title":"Crear HTML (template)","text":"<p>El <code>template</code> es uno de los componentes del patr\u00f3n de dise\u00f1o Model-View-Template (MVT), siendo el template el encargado de colocar los elementos para la interfaz web, para lo cual se usa HTML + CSS + JS + lenguaje de plantilla = Django template, el cual permite ejecutar l\u00f3gica de Python en lado servidor:</p> <p></p> <ul> <li>Template: Se encarga de la presentaci\u00f3n y renderiza los datos en una respuesta HTML. Los templates son archivos HTML que pueden contener etiquetas de template de Django para insertar din\u00e1micamente los datos pasados por la vista.</li> </ul> <p>Vamos a empezar por crear el template que vamos a servir,  debe estar en la carpeta <code>templates</code> y es un archivo <code>.html</code> al que podemos a\u00f1adir lenguaje de plantilla, <code>Django template</code>, m\u00e1s adelante:</p> <pre><code>  &lt;!-- &lt;mi_aplicacion o proyecto&gt;/templates/mi_template.html --&gt;\n  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n  &lt;head&gt;\n      &lt;title&gt;Mi Template&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;h1&gt;\u00a1Hola desde el template!&lt;/h1&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/03.crear_view/","title":"Crear Vista","text":"<p>La vista, <code>view</code> es uno de los componentes del patr\u00f3n de dise\u00f1o \"Model-View-Template\" (MVT), siendo el view el encargado de ejecutar l\u00f3gica cuando se pide un recurso:</p> <ul> <li>View: Maneja la l\u00f3gica de la aplicaci\u00f3n y las interacciones del usuario. Las vistas reciben solicitudes HTTP, procesan los datos necesarios y devuelven una respuesta HTTP. Las vistas se definen en el archivo <code>views.py</code>. En la pr\u00e1ctica, un view se define con una funci\u00f3n, <code>def</code>, o una <code>clase</code> con m\u00e9todos.</li> </ul> <p></p> <pre><code>   from django.shortcuts import render\n\n   def mi_vista(request):\n       return render(request, 'mi_template.html')\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/04.crear_url/","title":"Configurar Urls","text":"<p>Las rutas a las que se puede acceder en nuestra aplicaci\u00f3n se configuran en <code>urls.py</code> y pueden desempe\u00f1ar varios usos:</p> <ul> <li>Servir archivos o templates</li> <li>Redirecciones</li> <li>Endpoints de APIs, etc.</li> </ul> <p></p> <p>Para habilitar una ruta para nuestro view debemos colocar un c\u00f3digo similar a este en <code>urls.py</code>:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('mi-ruta/', views.mi_vista, name='mi_vista'),\n]\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/05.servir/","title":"Servir el template con Django","text":"<p>Una vez completados los pasos anteriores, ya puedes ejecutar el proyecto de nuevo con el comando:</p> <pre><code>  python manage.py runserver\n</code></pre> <p>Abre el navegador en localhost:8000/mi-ruta/ para ver el resultado. Prueba a hacer estos cambios para entender mejor c\u00f3mo funciona MVT con Django:</p> <ul> <li>\u00bfC\u00f3mo cambias la ruta para este view?</li> <li>\u00bfC\u00f3mo indicas la ubicaci\u00f3n del template en otra carpeta?</li> </ul> <p>\u00bfYa lo tienes? \u00a1Has completado este tutorial! \ud83d\udc4d\ud83c\udffc M\u00e1s tutoriales de Django en inicio.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/django/","title":"Django","text":""},{"location":"tags/","title":"Etiquetas","text":""},{"location":"tags/#full-stack","title":"full-stack","text":"<ul> <li>Introducci\u00f3n a Django</li> </ul>"},{"location":"tags/#intro","title":"intro","text":"<ul> <li>Introducci\u00f3n a Django</li> </ul>"}]}